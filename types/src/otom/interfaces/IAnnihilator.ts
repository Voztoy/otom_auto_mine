/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IAnnihilatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "annihilate"
      | "raiseToNucleonsExponent"
      | "setEnergy"
      | "setNucleonsExponent"
      | "setOtoms"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Annihilated"): EventFragment;

  encodeFunctionData(
    functionFragment: "annihilate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseToNucleonsExponent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnergy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNucleonsExponent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOtoms",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "annihilate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseToNucleonsExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnergy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNucleonsExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOtoms", data: BytesLike): Result;
}

export namespace AnnihilatedEvent {
  export type InputTuple = [
    annihilatedBy: AddressLike,
    atomIds: BigNumberish[],
    energyAmount: BigNumberish
  ];
  export type OutputTuple = [
    annihilatedBy: string,
    atomIds: bigint[],
    energyAmount: bigint
  ];
  export interface OutputObject {
    annihilatedBy: string;
    atomIds: bigint[];
    energyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAnnihilator extends BaseContract {
  connect(runner?: ContractRunner | null): IAnnihilator;
  waitForDeployment(): Promise<this>;

  interface: IAnnihilatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  annihilate: TypedContractMethod<
    [atomIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  raiseToNucleonsExponent: TypedContractMethod<
    [x: BigNumberish],
    [bigint],
    "view"
  >;

  setEnergy: TypedContractMethod<[_energy: AddressLike], [void], "nonpayable">;

  setNucleonsExponent: TypedContractMethod<
    [_exponentWad: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOtoms: TypedContractMethod<[_otoms: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "annihilate"
  ): TypedContractMethod<[atomIds: BigNumberish[]], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "raiseToNucleonsExponent"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEnergy"
  ): TypedContractMethod<[_energy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNucleonsExponent"
  ): TypedContractMethod<[_exponentWad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOtoms"
  ): TypedContractMethod<[_otoms: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Annihilated"
  ): TypedContractEvent<
    AnnihilatedEvent.InputTuple,
    AnnihilatedEvent.OutputTuple,
    AnnihilatedEvent.OutputObject
  >;

  filters: {
    "Annihilated(address,uint256[],uint256)": TypedContractEvent<
      AnnihilatedEvent.InputTuple,
      AnnihilatedEvent.OutputTuple,
      AnnihilatedEvent.OutputObject
    >;
    Annihilated: TypedContractEvent<
      AnnihilatedEvent.InputTuple,
      AnnihilatedEvent.OutputTuple,
      AnnihilatedEvent.OutputObject
    >;
  };
}
