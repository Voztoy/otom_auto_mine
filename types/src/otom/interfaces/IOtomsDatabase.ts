/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BondStruct = { strength: BigNumberish; bondType: string };

export type BondStructOutput = [strength: bigint, bondType: string] & {
  strength: bigint;
  bondType: string;
};

export type AtomStructureStruct = {
  universeHash: BytesLike;
  depth: BigNumberish;
  distance: BigNumberish;
  distanceIndex: BigNumberish;
  shell: BigNumberish;
  totalInOuter: BigNumberish[];
  emptyInOuter: BigNumberish[];
  filledInOuter: BigNumberish[];
  ancestors: BigNumberish[];
};

export type AtomStructureStructOutput = [
  universeHash: string,
  depth: bigint,
  distance: bigint,
  distanceIndex: bigint,
  shell: bigint,
  totalInOuter: bigint[],
  emptyInOuter: bigint[],
  filledInOuter: bigint[],
  ancestors: bigint[]
] & {
  universeHash: string;
  depth: bigint;
  distance: bigint;
  distanceIndex: bigint;
  shell: bigint;
  totalInOuter: bigint[];
  emptyInOuter: bigint[];
  filledInOuter: bigint[];
  ancestors: bigint[];
};

export type NucleusStruct = {
  protons: BigNumberish;
  neutrons: BigNumberish;
  nucleons: BigNumberish;
  stability: BigNumberish;
  decayType: string;
};

export type NucleusStructOutput = [
  protons: bigint,
  neutrons: bigint,
  nucleons: bigint,
  stability: bigint,
  decayType: string
] & {
  protons: bigint;
  neutrons: bigint;
  nucleons: bigint;
  stability: bigint;
  decayType: string;
};

export type AtomStruct = {
  radius: BigNumberish;
  volume: BigNumberish;
  mass: BigNumberish;
  density: BigNumberish;
  electronegativity: BigNumberish;
  metallic: boolean;
  name: string;
  series: string;
  periodicTableX: BigNumberish;
  periodicTableY: BigNumberish;
  structure: AtomStructureStruct;
  nucleus: NucleusStruct;
};

export type AtomStructOutput = [
  radius: bigint,
  volume: bigint,
  mass: bigint,
  density: bigint,
  electronegativity: bigint,
  metallic: boolean,
  name: string,
  series: string,
  periodicTableX: bigint,
  periodicTableY: bigint,
  structure: AtomStructureStructOutput,
  nucleus: NucleusStructOutput
] & {
  radius: bigint;
  volume: bigint;
  mass: bigint;
  density: bigint;
  electronegativity: bigint;
  metallic: boolean;
  name: string;
  series: string;
  periodicTableX: bigint;
  periodicTableY: bigint;
  structure: AtomStructureStructOutput;
  nucleus: NucleusStructOutput;
};

export type MoleculeStruct = {
  id: string;
  name: string;
  universeHash: BytesLike;
  activationEnergy: BigNumberish;
  radius: BigNumberish;
  bond: BondStruct;
  givingAtoms: AtomStruct[];
  receivingAtoms: AtomStruct[];
  electricalConductivity: BigNumberish;
  thermalConductivity: BigNumberish;
  toughness: BigNumberish;
  hardness: BigNumberish;
  ductility: BigNumberish;
};

export type MoleculeStructOutput = [
  id: string,
  name: string,
  universeHash: string,
  activationEnergy: bigint,
  radius: bigint,
  bond: BondStructOutput,
  givingAtoms: AtomStructOutput[],
  receivingAtoms: AtomStructOutput[],
  electricalConductivity: bigint,
  thermalConductivity: bigint,
  toughness: bigint,
  hardness: bigint,
  ductility: bigint
] & {
  id: string;
  name: string;
  universeHash: string;
  activationEnergy: bigint;
  radius: bigint;
  bond: BondStructOutput;
  givingAtoms: AtomStructOutput[];
  receivingAtoms: AtomStructOutput[];
  electricalConductivity: bigint;
  thermalConductivity: bigint;
  toughness: bigint;
  hardness: bigint;
  ductility: bigint;
};

export type UniverseInformationStruct = {
  energyFactorBps: BigNumberish;
  active: boolean;
  seedHash: BytesLike;
  name: string;
};

export type UniverseInformationStructOutput = [
  energyFactorBps: bigint,
  active: boolean,
  seedHash: string,
  name: string
] & {
  energyFactorBps: bigint;
  active: boolean;
  seedHash: string;
  name: string;
};

export interface IOtomsDatabaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeUniverses"
      | "getMoleculeByTokenId"
      | "getMoleculesDiscovered"
      | "getUniverseInformation"
      | "idToTokenId"
      | "initialize"
      | "maybeMarkMoleculeAsDiscovered"
      | "setEncoder"
      | "setUniverseInformation"
      | "toggleOperator"
      | "toggleUniverseActive"
      | "tokenURI"
      | "updateMolecule"
      | "updateTokenURI"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EncoderUpdated"
      | "MetadataUpdate"
      | "MoleculeDiscovered"
      | "OperatorToggled"
      | "UniverseActiveToggled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeUniverses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMoleculeByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMoleculesDiscovered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverseInformation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "idToTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maybeMarkMoleculeAsDiscovered",
    values: [MoleculeStruct, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEncoder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniverseInformation",
    values: [UniverseInformationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleUniverseActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMolecule",
    values: [MoleculeStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeUniverses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMoleculeByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMoleculesDiscovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverseInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maybeMarkMoleculeAsDiscovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEncoder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUniverseInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleUniverseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMolecule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;
}

export namespace EncoderUpdatedEvent {
  export type InputTuple = [newEncoder: AddressLike];
  export type OutputTuple = [newEncoder: string];
  export interface OutputObject {
    newEncoder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoleculeDiscoveredEvent {
  export type InputTuple = [
    universeHash: BytesLike,
    tokenId: BigNumberish,
    discoveredBy: AddressLike
  ];
  export type OutputTuple = [
    universeHash: string,
    tokenId: bigint,
    discoveredBy: string
  ];
  export interface OutputObject {
    universeHash: string;
    tokenId: bigint;
    discoveredBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorToggledEvent {
  export type InputTuple = [operator: AddressLike, enabled: boolean];
  export type OutputTuple = [operator: string, enabled: boolean];
  export interface OutputObject {
    operator: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniverseActiveToggledEvent {
  export type InputTuple = [universeHash: BytesLike, active: boolean];
  export type OutputTuple = [universeHash: string, active: boolean];
  export interface OutputObject {
    universeHash: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOtomsDatabase extends BaseContract {
  connect(runner?: ContractRunner | null): IOtomsDatabase;
  waitForDeployment(): Promise<this>;

  interface: IOtomsDatabaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeUniverses: TypedContractMethod<[], [string[]], "view">;

  getMoleculeByTokenId: TypedContractMethod<
    [tokenId: BigNumberish],
    [MoleculeStructOutput],
    "view"
  >;

  getMoleculesDiscovered: TypedContractMethod<
    [universeHash: BytesLike],
    [MoleculeStructOutput[]],
    "view"
  >;

  getUniverseInformation: TypedContractMethod<
    [universeHash: BytesLike],
    [UniverseInformationStructOutput],
    "view"
  >;

  idToTokenId: TypedContractMethod<[id: string], [bigint], "view">;

  initialize: TypedContractMethod<
    [_operators: AddressLike[], encoderAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  maybeMarkMoleculeAsDiscovered: TypedContractMethod<
    [_molecule: MoleculeStruct, tokenUri: string, _discoveredBy: AddressLike],
    [void],
    "nonpayable"
  >;

  setEncoder: TypedContractMethod<
    [_newEncoder: AddressLike],
    [void],
    "nonpayable"
  >;

  setUniverseInformation: TypedContractMethod<
    [_universeInformation: UniverseInformationStruct],
    [string],
    "nonpayable"
  >;

  toggleOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  toggleUniverseActive: TypedContractMethod<
    [_universeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  updateMolecule: TypedContractMethod<
    [_molecule: MoleculeStruct, _tokenUri: string],
    [void],
    "nonpayable"
  >;

  updateTokenURI: TypedContractMethod<
    [tokenId: BigNumberish, _tokenUri: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeUniverses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMoleculeByTokenId"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [MoleculeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMoleculesDiscovered"
  ): TypedContractMethod<
    [universeHash: BytesLike],
    [MoleculeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUniverseInformation"
  ): TypedContractMethod<
    [universeHash: BytesLike],
    [UniverseInformationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToTokenId"
  ): TypedContractMethod<[id: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_operators: AddressLike[], encoderAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maybeMarkMoleculeAsDiscovered"
  ): TypedContractMethod<
    [_molecule: MoleculeStruct, tokenUri: string, _discoveredBy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEncoder"
  ): TypedContractMethod<[_newEncoder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniverseInformation"
  ): TypedContractMethod<
    [_universeInformation: UniverseInformationStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleUniverseActive"
  ): TypedContractMethod<[_universeHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateMolecule"
  ): TypedContractMethod<
    [_molecule: MoleculeStruct, _tokenUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, _tokenUri: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EncoderUpdated"
  ): TypedContractEvent<
    EncoderUpdatedEvent.InputTuple,
    EncoderUpdatedEvent.OutputTuple,
    EncoderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "MoleculeDiscovered"
  ): TypedContractEvent<
    MoleculeDiscoveredEvent.InputTuple,
    MoleculeDiscoveredEvent.OutputTuple,
    MoleculeDiscoveredEvent.OutputObject
  >;
  getEvent(
    key: "OperatorToggled"
  ): TypedContractEvent<
    OperatorToggledEvent.InputTuple,
    OperatorToggledEvent.OutputTuple,
    OperatorToggledEvent.OutputObject
  >;
  getEvent(
    key: "UniverseActiveToggled"
  ): TypedContractEvent<
    UniverseActiveToggledEvent.InputTuple,
    UniverseActiveToggledEvent.OutputTuple,
    UniverseActiveToggledEvent.OutputObject
  >;

  filters: {
    "EncoderUpdated(address)": TypedContractEvent<
      EncoderUpdatedEvent.InputTuple,
      EncoderUpdatedEvent.OutputTuple,
      EncoderUpdatedEvent.OutputObject
    >;
    EncoderUpdated: TypedContractEvent<
      EncoderUpdatedEvent.InputTuple,
      EncoderUpdatedEvent.OutputTuple,
      EncoderUpdatedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "MoleculeDiscovered(bytes32,uint256,address)": TypedContractEvent<
      MoleculeDiscoveredEvent.InputTuple,
      MoleculeDiscoveredEvent.OutputTuple,
      MoleculeDiscoveredEvent.OutputObject
    >;
    MoleculeDiscovered: TypedContractEvent<
      MoleculeDiscoveredEvent.InputTuple,
      MoleculeDiscoveredEvent.OutputTuple,
      MoleculeDiscoveredEvent.OutputObject
    >;

    "OperatorToggled(address,bool)": TypedContractEvent<
      OperatorToggledEvent.InputTuple,
      OperatorToggledEvent.OutputTuple,
      OperatorToggledEvent.OutputObject
    >;
    OperatorToggled: TypedContractEvent<
      OperatorToggledEvent.InputTuple,
      OperatorToggledEvent.OutputTuple,
      OperatorToggledEvent.OutputObject
    >;

    "UniverseActiveToggled(bytes32,bool)": TypedContractEvent<
      UniverseActiveToggledEvent.InputTuple,
      UniverseActiveToggledEvent.OutputTuple,
      UniverseActiveToggledEvent.OutputObject
    >;
    UniverseActiveToggled: TypedContractEvent<
      UniverseActiveToggledEvent.InputTuple,
      UniverseActiveToggledEvent.OutputTuple,
      UniverseActiveToggledEvent.OutputObject
    >;
  };
}
