/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BondStruct = { strength: BigNumberish; bondType: string };

export type BondStructOutput = [strength: bigint, bondType: string] & {
  strength: bigint;
  bondType: string;
};

export type AtomStructureStruct = {
  universeHash: BytesLike;
  depth: BigNumberish;
  distance: BigNumberish;
  distanceIndex: BigNumberish;
  shell: BigNumberish;
  totalInOuter: BigNumberish[];
  emptyInOuter: BigNumberish[];
  filledInOuter: BigNumberish[];
  ancestors: BigNumberish[];
};

export type AtomStructureStructOutput = [
  universeHash: string,
  depth: bigint,
  distance: bigint,
  distanceIndex: bigint,
  shell: bigint,
  totalInOuter: bigint[],
  emptyInOuter: bigint[],
  filledInOuter: bigint[],
  ancestors: bigint[]
] & {
  universeHash: string;
  depth: bigint;
  distance: bigint;
  distanceIndex: bigint;
  shell: bigint;
  totalInOuter: bigint[];
  emptyInOuter: bigint[];
  filledInOuter: bigint[];
  ancestors: bigint[];
};

export type NucleusStruct = {
  protons: BigNumberish;
  neutrons: BigNumberish;
  nucleons: BigNumberish;
  stability: BigNumberish;
  decayType: string;
};

export type NucleusStructOutput = [
  protons: bigint,
  neutrons: bigint,
  nucleons: bigint,
  stability: bigint,
  decayType: string
] & {
  protons: bigint;
  neutrons: bigint;
  nucleons: bigint;
  stability: bigint;
  decayType: string;
};

export type AtomStruct = {
  radius: BigNumberish;
  volume: BigNumberish;
  mass: BigNumberish;
  density: BigNumberish;
  electronegativity: BigNumberish;
  metallic: boolean;
  name: string;
  series: string;
  periodicTableX: BigNumberish;
  periodicTableY: BigNumberish;
  structure: AtomStructureStruct;
  nucleus: NucleusStruct;
};

export type AtomStructOutput = [
  radius: bigint,
  volume: bigint,
  mass: bigint,
  density: bigint,
  electronegativity: bigint,
  metallic: boolean,
  name: string,
  series: string,
  periodicTableX: bigint,
  periodicTableY: bigint,
  structure: AtomStructureStructOutput,
  nucleus: NucleusStructOutput
] & {
  radius: bigint;
  volume: bigint;
  mass: bigint;
  density: bigint;
  electronegativity: bigint;
  metallic: boolean;
  name: string;
  series: string;
  periodicTableX: bigint;
  periodicTableY: bigint;
  structure: AtomStructureStructOutput;
  nucleus: NucleusStructOutput;
};

export type MoleculeStruct = {
  id: string;
  name: string;
  universeHash: BytesLike;
  activationEnergy: BigNumberish;
  radius: BigNumberish;
  bond: BondStruct;
  givingAtoms: AtomStruct[];
  receivingAtoms: AtomStruct[];
  electricalConductivity: BigNumberish;
  thermalConductivity: BigNumberish;
  toughness: BigNumberish;
  hardness: BigNumberish;
  ductility: BigNumberish;
};

export type MoleculeStructOutput = [
  id: string,
  name: string,
  universeHash: string,
  activationEnergy: bigint,
  radius: bigint,
  bond: BondStructOutput,
  givingAtoms: AtomStructOutput[],
  receivingAtoms: AtomStructOutput[],
  electricalConductivity: bigint,
  thermalConductivity: bigint,
  toughness: bigint,
  hardness: bigint,
  ductility: bigint
] & {
  id: string;
  name: string;
  universeHash: string;
  activationEnergy: bigint;
  radius: bigint;
  bond: BondStructOutput;
  givingAtoms: AtomStructOutput[];
  receivingAtoms: AtomStructOutput[];
  electricalConductivity: bigint;
  thermalConductivity: bigint;
  toughness: bigint;
  hardness: bigint;
  ductility: bigint;
};

export type MoleculeWithUriStruct = {
  molecule: MoleculeStruct;
  tokenUri: string;
};

export type MoleculeWithUriStructOutput = [
  molecule: MoleculeStructOutput,
  tokenUri: string
] & { molecule: MoleculeStructOutput; tokenUri: string };

export type ReactionResultStruct = {
  universeHash: BytesLike;
  reactionOutputId: BigNumberish;
  outputMolecules: MoleculeWithUriStruct[];
  inputAtomIds: BigNumberish[];
  remainingEnergy: BigNumberish;
  reactionTypes: string[];
  success: boolean;
};

export type ReactionResultStructOutput = [
  universeHash: string,
  reactionOutputId: bigint,
  outputMolecules: MoleculeWithUriStructOutput[],
  inputAtomIds: bigint[],
  remainingEnergy: bigint,
  reactionTypes: string[],
  success: boolean
] & {
  universeHash: string;
  reactionOutputId: bigint;
  outputMolecules: MoleculeWithUriStructOutput[];
  inputAtomIds: bigint[];
  remainingEnergy: bigint;
  reactionTypes: string[];
  success: boolean;
};

export interface IReactorInterface extends Interface {
  getFunction(
    nameOrSignature: "analyseReactions" | "initiateReaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewEncoder"
      | "NewEnergy"
      | "NewOtoms"
      | "NewReactionLengthLimit"
      | "NewSigner"
      | "ReactionAnalysed"
      | "ReactionInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "analyseReactions",
    values: [ReactionResultStruct[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateReaction",
    values: [BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "analyseReactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateReaction",
    data: BytesLike
  ): Result;
}

export namespace NewEncoderEvent {
  export type InputTuple = [encoder: AddressLike];
  export type OutputTuple = [encoder: string];
  export interface OutputObject {
    encoder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewEnergyEvent {
  export type InputTuple = [energy: AddressLike];
  export type OutputTuple = [energy: string];
  export interface OutputObject {
    energy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOtomsEvent {
  export type InputTuple = [otoms: AddressLike];
  export type OutputTuple = [otoms: string];
  export interface OutputObject {
    otoms: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReactionLengthLimitEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSignerEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReactionAnalysedEvent {
  export type InputTuple = [
    moleculeId: BigNumberish,
    labTechnician: AddressLike,
    reactionResult: ReactionResultStruct
  ];
  export type OutputTuple = [
    moleculeId: bigint,
    labTechnician: string,
    reactionResult: ReactionResultStructOutput
  ];
  export interface OutputObject {
    moleculeId: bigint;
    labTechnician: string;
    reactionResult: ReactionResultStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReactionInitiatedEvent {
  export type InputTuple = [
    universeHash: BytesLike,
    resultId: BigNumberish,
    labTechnician: AddressLike,
    atomIds: BigNumberish[],
    energyAmount: BigNumberish
  ];
  export type OutputTuple = [
    universeHash: string,
    resultId: bigint,
    labTechnician: string,
    atomIds: bigint[],
    energyAmount: bigint
  ];
  export interface OutputObject {
    universeHash: string;
    resultId: bigint;
    labTechnician: string;
    atomIds: bigint[];
    energyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IReactor extends BaseContract {
  connect(runner?: ContractRunner | null): IReactor;
  waitForDeployment(): Promise<this>;

  interface: IReactorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  analyseReactions: TypedContractMethod<
    [
      reactionResults: ReactionResultStruct[],
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  initiateReaction: TypedContractMethod<
    [atomIds: BigNumberish[], energyAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "analyseReactions"
  ): TypedContractMethod<
    [
      reactionResults: ReactionResultStruct[],
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateReaction"
  ): TypedContractMethod<
    [atomIds: BigNumberish[], energyAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "NewEncoder"
  ): TypedContractEvent<
    NewEncoderEvent.InputTuple,
    NewEncoderEvent.OutputTuple,
    NewEncoderEvent.OutputObject
  >;
  getEvent(
    key: "NewEnergy"
  ): TypedContractEvent<
    NewEnergyEvent.InputTuple,
    NewEnergyEvent.OutputTuple,
    NewEnergyEvent.OutputObject
  >;
  getEvent(
    key: "NewOtoms"
  ): TypedContractEvent<
    NewOtomsEvent.InputTuple,
    NewOtomsEvent.OutputTuple,
    NewOtomsEvent.OutputObject
  >;
  getEvent(
    key: "NewReactionLengthLimit"
  ): TypedContractEvent<
    NewReactionLengthLimitEvent.InputTuple,
    NewReactionLengthLimitEvent.OutputTuple,
    NewReactionLengthLimitEvent.OutputObject
  >;
  getEvent(
    key: "NewSigner"
  ): TypedContractEvent<
    NewSignerEvent.InputTuple,
    NewSignerEvent.OutputTuple,
    NewSignerEvent.OutputObject
  >;
  getEvent(
    key: "ReactionAnalysed"
  ): TypedContractEvent<
    ReactionAnalysedEvent.InputTuple,
    ReactionAnalysedEvent.OutputTuple,
    ReactionAnalysedEvent.OutputObject
  >;
  getEvent(
    key: "ReactionInitiated"
  ): TypedContractEvent<
    ReactionInitiatedEvent.InputTuple,
    ReactionInitiatedEvent.OutputTuple,
    ReactionInitiatedEvent.OutputObject
  >;

  filters: {
    "NewEncoder(address)": TypedContractEvent<
      NewEncoderEvent.InputTuple,
      NewEncoderEvent.OutputTuple,
      NewEncoderEvent.OutputObject
    >;
    NewEncoder: TypedContractEvent<
      NewEncoderEvent.InputTuple,
      NewEncoderEvent.OutputTuple,
      NewEncoderEvent.OutputObject
    >;

    "NewEnergy(address)": TypedContractEvent<
      NewEnergyEvent.InputTuple,
      NewEnergyEvent.OutputTuple,
      NewEnergyEvent.OutputObject
    >;
    NewEnergy: TypedContractEvent<
      NewEnergyEvent.InputTuple,
      NewEnergyEvent.OutputTuple,
      NewEnergyEvent.OutputObject
    >;

    "NewOtoms(address)": TypedContractEvent<
      NewOtomsEvent.InputTuple,
      NewOtomsEvent.OutputTuple,
      NewOtomsEvent.OutputObject
    >;
    NewOtoms: TypedContractEvent<
      NewOtomsEvent.InputTuple,
      NewOtomsEvent.OutputTuple,
      NewOtomsEvent.OutputObject
    >;

    "NewReactionLengthLimit(uint256)": TypedContractEvent<
      NewReactionLengthLimitEvent.InputTuple,
      NewReactionLengthLimitEvent.OutputTuple,
      NewReactionLengthLimitEvent.OutputObject
    >;
    NewReactionLengthLimit: TypedContractEvent<
      NewReactionLengthLimitEvent.InputTuple,
      NewReactionLengthLimitEvent.OutputTuple,
      NewReactionLengthLimitEvent.OutputObject
    >;

    "NewSigner(address)": TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;
    NewSigner: TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;

    "ReactionAnalysed(uint256,address,tuple)": TypedContractEvent<
      ReactionAnalysedEvent.InputTuple,
      ReactionAnalysedEvent.OutputTuple,
      ReactionAnalysedEvent.OutputObject
    >;
    ReactionAnalysed: TypedContractEvent<
      ReactionAnalysedEvent.InputTuple,
      ReactionAnalysedEvent.OutputTuple,
      ReactionAnalysedEvent.OutputObject
    >;

    "ReactionInitiated(bytes32,uint256,address,uint256[],uint256)": TypedContractEvent<
      ReactionInitiatedEvent.InputTuple,
      ReactionInitiatedEvent.OutputTuple,
      ReactionInitiatedEvent.OutputObject
    >;
    ReactionInitiated: TypedContractEvent<
      ReactionInitiatedEvent.InputTuple,
      ReactionInitiatedEvent.OutputTuple,
      ReactionInitiatedEvent.OutputObject
    >;
  };
}
