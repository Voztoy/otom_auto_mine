/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AnnihilatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "annihilate"
      | "energy"
      | "exponentWad"
      | "maxNucleons"
      | "otoms"
      | "owner"
      | "pendingOwner"
      | "raiseToNucleonsExponent"
      | "renounceOwnership"
      | "setEnergy"
      | "setMaxNucleons"
      | "setNucleonsExponent"
      | "setOtoms"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Annihilated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "annihilate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "energy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exponentWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNucleons",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "otoms", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseToNucleonsExponent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEnergy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNucleons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNucleonsExponent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOtoms",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "annihilate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "energy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exponentWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNucleons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otoms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseToNucleonsExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnergy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNucleons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNucleonsExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOtoms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AnnihilatedEvent {
  export type InputTuple = [
    annihilatedBy: AddressLike,
    atomIds: BigNumberish[],
    energyAmount: BigNumberish
  ];
  export type OutputTuple = [
    annihilatedBy: string,
    atomIds: bigint[],
    energyAmount: bigint
  ];
  export interface OutputObject {
    annihilatedBy: string;
    atomIds: bigint[];
    energyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Annihilator extends BaseContract {
  connect(runner?: ContractRunner | null): Annihilator;
  waitForDeployment(): Promise<this>;

  interface: AnnihilatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  annihilate: TypedContractMethod<
    [atomIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  energy: TypedContractMethod<[], [string], "view">;

  exponentWad: TypedContractMethod<[], [bigint], "view">;

  maxNucleons: TypedContractMethod<[], [bigint], "view">;

  otoms: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  raiseToNucleonsExponent: TypedContractMethod<
    [nucleonCount: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEnergy: TypedContractMethod<[_energy: AddressLike], [void], "nonpayable">;

  setMaxNucleons: TypedContractMethod<
    [_maxNucleons: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNucleonsExponent: TypedContractMethod<
    [_exponentWad: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOtoms: TypedContractMethod<[_otoms: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "annihilate"
  ): TypedContractMethod<[atomIds: BigNumberish[]], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "energy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exponentWad"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNucleons"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "otoms"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raiseToNucleonsExponent"
  ): TypedContractMethod<[nucleonCount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnergy"
  ): TypedContractMethod<[_energy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxNucleons"
  ): TypedContractMethod<[_maxNucleons: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNucleonsExponent"
  ): TypedContractMethod<[_exponentWad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOtoms"
  ): TypedContractMethod<[_otoms: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Annihilated"
  ): TypedContractEvent<
    AnnihilatedEvent.InputTuple,
    AnnihilatedEvent.OutputTuple,
    AnnihilatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Annihilated(address,uint256[],uint256)": TypedContractEvent<
      AnnihilatedEvent.InputTuple,
      AnnihilatedEvent.OutputTuple,
      AnnihilatedEvent.OutputObject
    >;
    Annihilated: TypedContractEvent<
      AnnihilatedEvent.InputTuple,
      AnnihilatedEvent.OutputTuple,
      AnnihilatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
